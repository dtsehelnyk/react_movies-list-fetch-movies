{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","Title","Plot","Poster","imdbID","className","src","alt","href","MoviesList","movies","map","movie","key","FindMovie","addMovie","useState","enteredName","setMovieSearch","foundMovie","setMovie","isCorrect","setAvailability","movieRequest","a","fetch","find","json","result","trim","Error","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","event","target","onClick","disabled","App","data","setMovies","newMovie","ReactDOM","render","document","getElementById"],"mappings":"gvEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,YAFuB,MAEhB,GAFgB,EAGvBC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,OAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAI,qCAAgCJ,IAAvC,aC/BKK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAMR,QAAYQ,S,uCCJ3BE,G,MAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAGHC,mBAAS,IAHN,mBAGlCC,EAHkC,KAGrBC,EAHqB,OAIVF,mBAAS,MAJC,mBAIlCG,EAJkC,KAItBC,EAJsB,OAKJJ,oBAAS,GALL,mBAKlCK,EALkC,KAKvBC,EALuB,KAOnCC,EAAY,uCAAG,8BAAAC,EAAA,+EAGEC,MAAM,kCAAD,OAThB,WASgB,cAA4CR,IAHnD,cAGXS,EAHW,gBAIIA,EAAKC,OAJT,UAIXC,EAJW,QAMbX,EAAYY,QAAWD,EAAOE,MANjB,wBAOfR,GAAgB,GAChBF,EAASQ,GARM,2BAajBN,GAAgB,GAbC,wDAejBA,GAAgB,GAfC,+DAAH,qDAoBlB,OACE,oCACE,0BACEjB,UAAU,aACV0B,SAAU,SAAAC,GAAC,OAAIA,EAAEC,mBAEjB,yBAAK5B,UAAU,SACb,2BAAOA,UAAU,QAAQ6B,QAAQ,eAAjC,eAIA,yBAAK7B,UAAU,WACb,2BACE8B,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZhC,UAAWiC,IAAW,QAAS,CAC7B,aAAejB,IAAcF,IAE/BoB,MAAOtB,EACPuB,SAAU,SAAAC,GAAK,OAAIvB,EAAeuB,EAAMC,OAAOH,aAIhDlB,IAAcF,IAEb,uBAAGd,UAAU,kBAAb,yCAMN,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACE8B,KAAK,SACL9B,UAAU,kBACVsC,QAAS,SAAAf,GAAM,OAAIL,EAAaK,KAHlC,iBASF,yBAAKvB,UAAU,WACb,4BACE8B,KAAK,SACL9B,UAAU,oBACVsC,QAAS,WACP5B,EAASI,GACTD,EAAe,IACfE,EAAS,OAEXwB,UAAWvB,GARb,sBAgBJA,GAAaF,GAEX,yBAAKd,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAcc,O,OC5Fd0B,EAAM,WAAO,IAAD,EACK7B,mBAAS8B,GADd,mBAChBpC,EADgB,KACRqC,EADQ,KAcvB,OACE,yBAAK1C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWU,SAjBA,SAACiC,GACXA,IAAYtC,EAAOgB,MAAK,SAAAd,GAAK,OAAIA,EAAMR,SAAW4C,EAAS5C,WAIhE2C,EAAU,GAAD,mBACJrC,GADI,CAEPsC,WCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.862007de.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Plot = '',\n  Poster,\n  imdbID,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const FindMovie = ({ addMovie }) => {\n  const key = '85d016e4';\n\n  const [enteredName, setMovieSearch] = useState('');\n  const [foundMovie, setMovie] = useState(null);\n  const [isCorrect, setAvailability] = useState(false);\n\n  const movieRequest = async() => {\n    try {\n      // eslint-disable-next-line\n      const find = await fetch(`http://www.omdbapi.com/?apikey=${key}&t=${enteredName}`);\n      const result = await find.json();\n\n      if (enteredName.trim() && !result.Error) {\n        setAvailability(true);\n        setMovie(result);\n\n        return;\n      }\n\n      setAvailability(false);\n    } catch (error) {\n      setAvailability(false);\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={e => e.preventDefault()}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': (!isCorrect || !foundMovie),\n              })}\n              value={enteredName}\n              onChange={event => setMovieSearch(event.target.value)}\n            />\n          </div>\n\n          {(!isCorrect || !foundMovie)\n            && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={result => movieRequest(result)}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                addMovie(foundMovie);\n                setMovieSearch('');\n                setMovie(null);\n              }}\n              disabled={!isCorrect}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {(isCorrect && foundMovie)\n        && (\n          <div className=\"container\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard {...foundMovie} />\n          </div>\n        )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (newMovie) => {\n    if (!newMovie || movies.find(movie => movie.imdbID === newMovie.imdbID)) {\n      return;\n    }\n\n    setMovies([\n      ...movies,\n      newMovie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}